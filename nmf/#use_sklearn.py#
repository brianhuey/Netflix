import numpy as nd
import scipy.sparse as sp
import random as r
import math
from sklearn.decomposition import ProjectedGradientNMF


def read_data(filename,movie_ids={},user_ids={},n_movies=0,n_users=0,discard =False):
    
    f = open(filename)

    row = []
    column = []
    values = []

    for line in f:
        fields = line.strip().split(",")
        
        movie_id = fields[0]
        user_id = fields[1]
        
        if discard and ((not movie_id in movie_ids) or (not user_id in user_ids)):
            continue

        if not movie_id in movie_ids:
            movie_ids[movie_id] = n_movies
            n_movies+=1
        if not user_id in user_ids:
            user_ids[user_id] = n_users
            n_users += 1
            
        row.append(movie_ids[movie_id])
        column.append(user_ids[user_id])
        # values.append(float(fields[2]))
        values.append(1.0)

    return((sp.csr_matrix((values,(row,column)),shape=(n_movies,n_users)),
            movie_ids,user_ids,n_movies,n_users))


def driver_movie_data_test(train_filename,test_filename,k):
    (A,movie_ids,user_ids,m_count,u_count) = read_data(train_filename)

    model = ProjectedGradientNMF(n_components=k, init='random',random_state=0)
    
    model.fit(A) 
    